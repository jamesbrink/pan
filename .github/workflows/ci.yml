name: CI

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: DeterminateSystems/nix-installer-action@v17
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
      # Use GitHub's own cache action instead of the DeterminateSystems one
      - uses: actions/cache@v4
        name: Cache Nix store
        with:
          path: |
            /nix/store
            ~/.cache/nix
          key: nix-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}
          restore-keys: |
            nix-${{ runner.os }}-
            
      - name: Configure Nix
        run: |
          mkdir -p ~/.config/nix
          echo 'extra-experimental-features = nix-command flakes' >> ~/.config/nix/nix.conf
          echo 'allow-import-from-derivation = false' >> ~/.config/nix/nix.conf
          echo 'eval-cache = false' >> ~/.config/nix/nix.conf
          echo 'warn-dirty = false' >> ~/.config/nix/nix.conf
          echo 'accept-flake-config = true' >> ~/.config/nix/nix.conf
          
          # Enable more binary caches to help with build issues
          echo 'substituters = https://cache.nixos.org https://nix-community.cachix.org' >> ~/.config/nix/nix.conf
          echo 'trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=' >> ~/.config/nix/nix.conf
          
          # Set binary cache settings for reliability
          echo 'connect-timeout = 30' >> ~/.config/nix/nix.conf  
          echo 'stalled-download-timeout = 60' >> ~/.config/nix/nix.conf
          echo 'fallback = true' >> ~/.config/nix/nix.conf
          
      - name: Run linting
        # Handle stderr redirection to filter out warnings
        run: |
          export NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1
          nix --option accept-flake-config true develop --impure -c make lint || exit $?
        shell: bash

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: DeterminateSystems/nix-installer-action@v17
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
      # Use GitHub's own cache action instead of the DeterminateSystems one
      - uses: actions/cache@v4
        name: Cache Nix store
        with:
          path: |
            /nix/store
            ~/.cache/nix
          key: nix-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}
          restore-keys: |
            nix-${{ runner.os }}-
            
      - name: Configure Nix
        run: |
          mkdir -p ~/.config/nix
          echo 'extra-experimental-features = nix-command flakes' >> ~/.config/nix/nix.conf
          echo 'allow-import-from-derivation = false' >> ~/.config/nix/nix.conf
          echo 'eval-cache = false' >> ~/.config/nix/nix.conf
          echo 'warn-dirty = false' >> ~/.config/nix/nix.conf
          echo 'accept-flake-config = true' >> ~/.config/nix/nix.conf
          
          # Enable more binary caches to help with build issues
          echo 'substituters = https://cache.nixos.org https://nix-community.cachix.org' >> ~/.config/nix/nix.conf
          echo 'trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=' >> ~/.config/nix/nix.conf
          
          # Set binary cache settings for reliability
          echo 'connect-timeout = 30' >> ~/.config/nix/nix.conf  
          echo 'stalled-download-timeout = 60' >> ~/.config/nix/nix.conf
          echo 'fallback = true' >> ~/.config/nix/nix.conf
          
      - name: Run type checking
        # Handle stderr redirection to filter out warnings
        run: |
          export NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1
          nix --option accept-flake-config true develop --impure -c make type || exit $?
        shell: bash

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: DeterminateSystems/nix-installer-action@v17
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
      # Use GitHub's own cache action instead of the DeterminateSystems one  
      - uses: actions/cache@v4
        name: Cache Nix store
        with:
          path: |
            /nix/store
            ~/.cache/nix
          key: nix-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}
          restore-keys: |
            nix-${{ runner.os }}-
            
      - name: Configure Nix
        run: |
          mkdir -p ~/.config/nix
          echo 'extra-experimental-features = nix-command flakes' >> ~/.config/nix/nix.conf
          echo 'allow-import-from-derivation = false' >> ~/.config/nix/nix.conf
          echo 'eval-cache = false' >> ~/.config/nix/nix.conf
          echo 'warn-dirty = false' >> ~/.config/nix/nix.conf
          echo 'accept-flake-config = true' >> ~/.config/nix/nix.conf
          
          # Enable more binary caches to help with build issues
          echo 'substituters = https://cache.nixos.org https://nix-community.cachix.org' >> ~/.config/nix/nix.conf
          echo 'trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=' >> ~/.config/nix/nix.conf
          
          # Set binary cache settings for reliability
          echo 'connect-timeout = 30' >> ~/.config/nix/nix.conf  
          echo 'stalled-download-timeout = 60' >> ~/.config/nix/nix.conf
          echo 'fallback = true' >> ~/.config/nix/nix.conf
          
      - name: Run tests
        # Handle stderr redirection to filter out warnings
        run: |
          export NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1
          nix --option accept-flake-config true develop --impure -c make test || exit $?
        shell: bash